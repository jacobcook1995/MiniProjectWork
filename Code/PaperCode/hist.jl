#!/usr/bin/env julia
# hist.jl
# A script that reads in data generated by gillespie simulation of the two species
# genetic switch. this data is then used to perform analysis
#
# Author: Jacob Cook
# Date: September 2018

using Plots
import GR # this is necessary to avoid a world age error when using GR in function

function main()
    # First check that an argument for naming has been provided
    if length(ARGS) == 0
        println("Error: Need to provide an argument to name output with.")
        return(nothing)
    # then check that a system volume has been provided
    elseif length(ARGS) == 1
        println("Error: Need to provide an argument to set system volume.")
        return(nothing)
    end
    # Then take system volume Ω, check if provided value is integer
    Ω = 0
    try Ω = parse(Int64,ARGS[2])
    catch y
        if isa(y, ArgumentError) # would only really expect an argument error
            println("Error: System volume has to be integer.")
            return(nothing)
        end
    end
    # define file names to read in
    input_wA = "../Results/wA$(ARGS[1])V$(ARGS[2]).csv"
    input_wB = "../Results/wB$(ARGS[1])V$(ARGS[2]).csv"
    input_ps = "../Results/ps$(ARGS[1])V$(ARGS[2]).csv"
    input_hist = "../Results/hist$(ARGS[1])V$(ARGS[2]).csv"
    lwA = countlines(input_wA)
    wA = zeros(lwA)
    i = 0
    open(input_wA, "r") do in_file
        for line in eachline(in_file)
            i += 1
            wA[i] = parse(Float64,line)
        end
    end
    lwB = countlines(input_wB)
    wB = zeros(lwB)
    i = 0
    open(input_wB, "r") do in_file
        for line in eachline(in_file)
            i += 1
            wB[i] = parse(Float64,line)
        end
    end
    # histogram(wA)
    # savefig("../Results/wA.png")
    # histogram(wB)
    # savefig("../Results/wB.png")
    println(length(wA))
    return(nothing)
end

@time main()
